name: Project Views and Automation Setup

on:
  workflow_dispatch:
  schedule:
    # Run weekly to ensure project views are maintained
    - cron: '0 2 * * 0'

jobs:
  setup-project-views:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup GitHub CLI
      uses: cli/setup-gh@v2
    
    - name: Setup project views
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PROJECT_NUMBER: 3
      run: |
        # Get project ID
        PROJECT_ID=$(gh api graphql -f query='
          query($org:String!, $number:Int!) {
            organization(login: $org) {
              projectV2(number: $number) { id }
            }
          }' -f org=loopcraftlab -f number=$PROJECT_NUMBER --jq '.data.organization.projectV2.id')
        
        echo "Project ID: $PROJECT_ID"
        
        # Create Development Board View
        gh api graphql -f query='
          mutation($project:ID!) {
            createProjectV2View(input: {
              projectId: $project
              name: "Development Board"
              layout: BOARD_LAYOUT
              groupByFields: [{id: "Status"}]
            }) {
              view { id }
            }
          }' -f project=$PROJECT_ID || echo "Development Board view already exists"
        
        # Create Project Table View
        gh api graphql -f query='
          mutation($project:ID!) {
            createProjectV2View(input: {
              projectId: $project
              name: "Project Table"
              layout: TABLE_LAYOUT
              fields: ["Title", "Status", "Priority", "Area", "Assignees", "Labels"]
            }) {
              view { id }
            }
          }' -f project=$PROJECT_ID || echo "Project Table view already exists"
        
        # Create Release Roadmap View
        gh api graphql -f query='
          mutation($project:ID!) {
            createProjectV2View(input: {
              projectId: $project
              name: "Release Roadmap"
              layout: ROADMAP_LAYOUT
              groupByFields: [{id: "Epic"}]
              sortByFields: [{field: "Target Date", direction: ASC}]
            }) {
              view { id }
            }
          }' -f project=$PROJECT_ID || echo "Release Roadmap view already exists"
        
        # Create Sprint Board View
        gh api graphql -f query='
          mutation($project:ID!) {
            createProjectV2View(input: {
              projectId: $project
              name: "Sprint Board"
              layout: BOARD_LAYOUT
              groupByFields: [{id: "Status"}]
              sortByFields: [{field: "Priority", direction: DESC}]
            }) {
              view { id }
            }
          }' -f project=$PROJECT_ID || echo "Sprint Board view already exists"
        
        # Create Backlog View
        gh api graphql -f query='
          mutation($project:ID!) {
            createProjectV2View(input: {
              projectId: $project
              name: "Backlog"
              layout: TABLE_LAYOUT
              sortByFields: [{field: "Priority", direction: DESC}]
              filters: [{field: "Status", value: "Todo"}]
            }) {
              view { id }
            }
          }' -f project=$PROJECT_ID || echo "Backlog view already exists"

  setup-automation-rules:
    runs-on: ubuntu-latest
    needs: setup-project-views
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup GitHub CLI
      uses: cli/setup-gh@v2
    
    - name: Setup automation rules
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PROJECT_NUMBER: 3
      run: |
        # Get project ID
        PROJECT_ID=$(gh api graphql -f query='
          query($org:String!, $number:Int!) {
            organization(login: $org) {
              projectV2(number: $number) { id }
            }
          }' -f org=loopcraftlab -f number=$PROJECT_NUMBER --jq '.data.organization.projectV2.id')
        
        # Create automation rules using GitHub CLI
        # Note: GitHub CLI doesn't directly support automation rules creation
        # This would typically be done through the GitHub web interface
        # But we can create a script to help set them up
        
        cat > setup-automation-rules.md << 'EOF'
        # GitHub Project Automation Rules Setup Guide
        
        ## Manual Setup Required
        
        Please set up the following automation rules in your GitHub Project:
        
        ### 1. Issue Assignment Rules
        - **When**: Issue is assigned
        - **Action**: Set Status to "In Progress"
        
        - **When**: Issue is unassigned
        - **Action**: Set Status to "Todo"
        
        ### 2. Pull Request Rules
        - **When**: Pull request is opened
        - **Action**: Set Status to "Review"
        
        - **When**: Pull request is merged
        - **Action**: Set Status to "Done"
        
        - **When**: Pull request is closed (not merged)
        - **Action**: Set Status to "In Progress"
        
        ### 3. Label Rules
        - **When**: Issue has priority-high label
        - **Action**: Set Priority to "P0"
        
        - **When**: Issue has priority-medium label
        - **Action**: Set Priority to "P1"
        
        - **When**: Issue has priority-low label
        - **Action**: Set Priority to "P2"
        
        - **When**: Issue has frontend label
        - **Action**: Set Area to "Frontend"
        
        - **When**: Issue has backend label
        - **Action**: Set Area to "Backend"
        
        - **When**: Issue has ai label
        - **Action**: Set Area to "AI"
        
        ### 4. Date Tracking Rules
        - **When**: Status changes to "In Progress"
        - **Action**: Set Start Date to current date
        
        - **When**: Status changes to "Done"
        - **Action**: Set Target Date to current date
        
        ### 5. Epic Linking Rules
        - **When**: Issue has epic label
        - **Action**: Link to corresponding epic issue
        
        ## Setup Instructions
        
        1. Go to your GitHub Project: https://github.com/orgs/loopcraftlab/projects/3
        2. Click on "Settings" (gear icon)
        3. Go to "Automation" section
        4. Add each rule listed above
        5. Save the automation rules
        
        ## Custom Fields Required
        
        Make sure your project has these custom fields:
        - **Status**: Single select (Todo, In Progress, Review, Testing, Done)
        - **Priority**: Single select (P0, P1, P2)
        - **Area**: Single select (Frontend, Backend, AI, DevOps)
        - **Start Date**: Date field
        - **Target Date**: Date field
        - **Epic**: Text field (for linking to epic issues)
        EOF
        
        echo "Automation rules setup guide created: setup-automation-rules.md"

  setup-project-fields:
    runs-on: ubuntu-latest
    needs: setup-project-views
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup GitHub CLI
      uses: cli/setup-gh@v2
    
    - name: Setup custom fields
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PROJECT_NUMBER: 3
      run: |
        # Get project ID
        PROJECT_ID=$(gh api graphql -f query='
          query($org:String!, $number:Int!) {
            organization(login: $org) {
              projectV2(number: $number) { id }
            }
          }' -f org=loopcraftlab -f number=$PROJECT_NUMBER --jq '.data.organization.projectV2.id')
        
        # Create Status field
        gh api graphql -f query='
          mutation($project:ID!) {
            createProjectV2Field(input: {
              projectId: $project
              name: "Status"
              dataType: SINGLE_SELECT
              singleSelectOptions: [
                {name: "Todo", color: "GRAY"}
                {name: "In Progress", color: "BLUE"}
                {name: "Review", color: "YELLOW"}
                {name: "Testing", color: "ORANGE"}
                {name: "Done", color: "GREEN"}
              ]
            }) {
              projectV2Field { id }
            }
          }' -f project=$PROJECT_ID || echo "Status field already exists"
        
        # Create Priority field
        gh api graphql -f query='
          mutation($project:ID!) {
            createProjectV2Field(input: {
              projectId: $project
              name: "Priority"
              dataType: SINGLE_SELECT
              singleSelectOptions: [
                {name: "P0", color: "RED"}
                {name: "P1", color: "ORANGE"}
                {name: "P2", color: "YELLOW"}
              ]
            }) {
              projectV2Field { id }
            }
          }' -f project=$PROJECT_ID || echo "Priority field already exists"
        
        # Create Area field
        gh api graphql -f query='
          mutation($project:ID!) {
            createProjectV2Field(input: {
              projectId: $project
              name: "Area"
              dataType: SINGLE_SELECT
              singleSelectOptions: [
                {name: "Frontend", color: "BLUE"}
                {name: "Backend", color: "GREEN"}
                {name: "AI", color: "PURPLE"}
                {name: "DevOps", color: "GRAY"}
              ]
            }) {
              projectV2Field { id }
            }
          }' -f project=$PROJECT_ID || echo "Area field already exists"
        
        # Create Start Date field
        gh api graphql -f query='
          mutation($project:ID!) {
            createProjectV2Field(input: {
              projectId: $project
              name: "Start Date"
              dataType: DATE
            }) {
              projectV2Field { id }
            }
          }' -f project=$PROJECT_ID || echo "Start Date field already exists"
        
        # Create Target Date field
        gh api graphql -f query='
          mutation($project:ID!) {
            createProjectV2Field(input: {
              projectId: $project
              name: "Target Date"
              dataType: DATE
            }) {
              projectV2Field { id }
            }
          }' -f project=$PROJECT_ID || echo "Target Date field already exists"
        
        # Create Epic field
        gh api graphql -f query='
          mutation($project:ID!) {
            createProjectV2Field(input: {
              projectId: $project
              name: "Epic"
              dataType: TEXT
            }) {
              projectV2Field { id }
            }
          }' -f project=$PROJECT_ID || echo "Epic field already exists"

  add-issues-to-project:
    runs-on: ubuntu-latest
    needs: [setup-project-views, setup-project-fields]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup GitHub CLI
      uses: cli/setup-gh@v2
    
    - name: Add existing issues to project
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PROJECT_NUMBER: 3
      run: |
        # Get project ID
        PROJECT_ID=$(gh api graphql -f query='
          query($org:String!, $number:Int!) {
            organization(login: $org) {
              projectV2(number: $number) { id }
            }
          }' -f org=loopcraftlab -f number=$PROJECT_NUMBER --jq '.data.organization.projectV2.id')
        
        # Get all open issues
        ISSUES=$(gh issue list --limit 100 --json number,node_id,title,labels)
        
        # Add each issue to the project
        echo "$ISSUES" | jq -r '.[] | .node_id' | while read node_id; do
          if [[ "$node_id" != "" ]]; then
            gh api graphql -f query='
              mutation($project:ID!, $item:ID!) {
                addProjectV2Item(input: {projectId: $project, contentId: $item}) {
                  item { id }
                }
              }' -f project=$PROJECT_ID -f item=$node_id || echo "Issue already in project or error occurred"
          fi
        done
        
        echo "Added existing issues to project board"

  generate-setup-report:
    runs-on: ubuntu-latest
    needs: [setup-project-views, setup-automation-rules, setup-project-fields, add-issues-to-project]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup GitHub CLI
      uses: cli/setup-gh@v2
    
    - name: Generate setup report
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PROJECT_NUMBER: 3
      run: |
        # Create setup completion report
        cat > project-setup-report.md << 'EOF'
        # GitHub Project Setup Report
        
        ## ✅ Completed Setup
        
        ### Project Views Created
        - ✅ Development Board (Board layout, grouped by Status)
        - ✅ Project Table (Table layout with key fields)
        - ✅ Release Roadmap (Roadmap layout, grouped by Epic)
        - ✅ Sprint Board (Board layout, sorted by Priority)
        - ✅ Backlog (Table layout, filtered for Todo items)
        
        ### Custom Fields Created
        - ✅ Status (Todo, In Progress, Review, Testing, Done)
        - ✅ Priority (P0, P1, P2)
        - ✅ Area (Frontend, Backend, AI, DevOps)
        - ✅ Start Date (Date field)
        - ✅ Target Date (Date field)
        - ✅ Epic (Text field for linking)
        
        ### Issues Added to Project
        - ✅ All existing issues have been added to the project board
        
        ## 🔧 Manual Setup Required
        
        ### Automation Rules
        Please set up the following automation rules manually:
        
        1. **Issue Assignment Rules**
           - Assigned → In Progress
           - Unassigned → Todo
        
        2. **Pull Request Rules**
           - PR Opened → Review
           - PR Merged → Done
           - PR Closed → In Progress
        
        3. **Label Rules**
           - priority-high → P0
           - priority-medium → P1
           - priority-low → P2
           - frontend → Frontend Area
           - backend → Backend Area
           - ai → AI Area
        
        4. **Date Tracking Rules**
           - In Progress → Set Start Date
           - Done → Set Target Date
        
        ## 📊 Project Statistics
        
        - **Total Issues**: $(gh issue list --limit 1000 --json number | jq length)
        - **Open Issues**: $(gh issue list --state open --limit 1000 --json number | jq length)
        - **Closed Issues**: $(gh issue list --state closed --limit 1000 --json number | jq length)
        
        ## 🎯 Next Steps
        
        1. **Set up automation rules** using the guide in setup-automation-rules.md
        2. **Configure team access** to the project
        3. **Set up notifications** for project updates
        4. **Start using the project board** for issue tracking
        5. **Regular maintenance** - the automation workflows will handle this
        
        ## 🔗 Useful Links
        
        - **Project URL**: https://github.com/orgs/loopcraftlab/projects/3
        - **Repository**: https://github.com/loopcraftlab/docqet
        - **Issues**: https://github.com/loopcraftlab/docqet/issues
        - **Discussions**: https://github.com/loopcraftlab/docqet/discussions
        
        ---
        *Report generated on $(date)*
        EOF
        
        echo "Project setup report generated: project-setup-report.md"
        
        # Create issue with the report
        gh issue create --title "Project Setup Complete - $(date +%Y-%m-%d)" \
          --body-file project-setup-report.md \
          --label "documentation,automation,project-management" 