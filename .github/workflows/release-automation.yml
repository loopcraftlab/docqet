name: Release Automation

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [[ "$PREVIOUS_TAG" == "" ]]; then
          # First release
          CHANGELOG=$(git log --oneline --pretty=format:"- %s (%h)" --no-merges)
        else
          # Get commits since last tag
          CHANGELOG=$(git log --oneline --pretty=format:"- %s (%h)" --no-merges $PREVIOUS_TAG..HEAD)
        fi
        
        # Categorize changes
        FEATURES=$(echo "$CHANGELOG" | grep -i "feat\|feature\|add" || echo "")
        FIXES=$(echo "$CHANGELOG" | grep -i "fix\|bug\|issue" || echo "")
        BREAKING=$(echo "$CHANGELOG" | grep -i "breaking\|major" || echo "")
        DOCS=$(echo "$CHANGELOG" | grep -i "doc\|readme\|guide" || echo "")
        OTHER=$(echo "$CHANGELOG" | grep -v -i "feat\|feature\|add\|fix\|bug\|issue\|breaking\|major\|doc\|readme\|guide" || echo "")
        
        # Create formatted changelog
        echo "## ${{ steps.version.outputs.version }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "Release Date: $(date +%Y-%m-%d)" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        if [[ "$BREAKING" != "" ]]; then
          echo "### ⚠️ Breaking Changes" >> CHANGELOG.md
          echo "$BREAKING" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        if [[ "$FEATURES" != "" ]]; then
          echo "### ✨ New Features" >> CHANGELOG.md
          echo "$FEATURES" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        if [[ "$FIXES" != "" ]]; then
          echo "### 🐛 Bug Fixes" >> CHANGELOG.md
          echo "$FIXES" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        if [[ "$DOCS" != "" ]]; then
          echo "### 📚 Documentation" >> CHANGELOG.md
          echo "$DOCS" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        if [[ "$OTHER" != "" ]]; then
          echo "### 🔧 Other Changes" >> CHANGELOG.md
          echo "$OTHER" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        # Set output
        CHANGELOG_CONTENT=$(cat CHANGELOG.md)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Update version files
      run: |
        VERSION_NUMBER="${{ steps.version.outputs.VERSION_NUMBER }}"
        
        # Update backend version
        if [ -f "backend/app/__init__.py" ]; then
          sed -i "s/__version__ = .*/__version__ = \"$VERSION_NUMBER\"/" backend/app/__init__.py
        fi
        
        # Update frontend version
        if [ -f "frontend/package.json" ]; then
          npm version $VERSION_NUMBER --no-git-tag-version --prefix frontend
        fi
        
        # Update main CHANGELOG.md
        if [ -f "CHANGELOG.md" ]; then
          cat CHANGELOG.md >> CHANGELOG.md.tmp
          mv CHANGELOG.md.tmp CHANGELOG.md
        fi
    
    - name: Build Docker images
      run: |
        # Build backend image
        docker build -t loopcraftlab/docqet-backend:${{ steps.version.outputs.version }} -f backend/Dockerfile.dev backend/
        docker build -t loopcraftlab/docqet-frontend:${{ steps.version.outputs.version }} -f frontend/Dockerfile.dev frontend/
        
        # Tag as latest
        docker tag loopcraftlab/docqet-backend:${{ steps.version.outputs.version }} loopcraftlab/docqet-backend:latest
        docker tag loopcraftlab/docqet-frontend:${{ steps.version.outputs.version }} loopcraftlab/docqet-frontend:latest
    
    - name: Push Docker images
      if: github.event_name == 'push'
      run: |
        echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        
        # Push versioned images
        docker push loopcraftlab/docqet-backend:${{ steps.version.outputs.version }}
        docker push loopcraftlab/docqet-frontend:${{ steps.version.outputs.version }}
        
        # Push latest images
        docker push loopcraftlab/docqet-backend:latest
        docker push loopcraftlab/docqet-frontend:latest
    
    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Docqet ${{ steps.version.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
    
    - name: Update project board
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PROJECT_NUMBER: 3
      run: |
        # Create release issue
        gh issue create --title "Release ${{ steps.version.outputs.version }}" \
          --body "Release ${{ steps.version.outputs.version }} has been created and deployed.
        
        ${{ steps.changelog.outputs.changelog }}" \
          --label "release,automation"
        
        # Move all completed issues to Done
        gh issue list --label "done" --json number | jq -r '.[].number' | while read issue; do
          gh issue edit $issue --add-label "released-${{ steps.version.outputs.VERSION_NUMBER }}"
        done

  notify-team:
    runs-on: ubuntu-latest
    needs: create-release
    if: always()
    
    steps:
    - name: Notify team
      run: |
        echo "Release ${{ needs.create-release.outputs.version }} has been created!"
        echo "Changelog:"
        echo "${{ needs.create-release.outputs.changelog }}"
        
        # You can add Slack/Teams notifications here
        # Example for Slack:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data "{\"text\":\"🎉 Docqet ${{ needs.create-release.outputs.version }} has been released!\"}" \
        #   ${{ secrets.SLACK_WEBHOOK_URL }} 