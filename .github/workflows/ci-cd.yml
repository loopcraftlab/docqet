name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: docqet
  ECS_CLUSTER: docqet-cluster
  ECS_SERVICE_BACKEND: docqet-backend
  ECS_SERVICE_FRONTEND: docqet-frontend

jobs:
  # Quality Assurance
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov black flake8 mypy bandit
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Backend linting
        run: |
          cd backend
          black --check .
          flake8 . --max-line-length=88 --exclude=alembic,tests
          mypy .
      
      - name: Frontend linting
        run: |
          cd frontend
          npm run lint
      
      - name: Security scanning
        run: |
          cd backend
          bandit -r . -f json -o bandit-report.json || true
          cd ../frontend
          npm audit --audit-level=moderate || true

  # Testing
  test:
    runs-on: ubuntu-latest
    needs: [quality-checks]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Backend tests
        run: |
          cd backend
          pytest --cov=app --cov-report=xml --cov-report=term-missing
      
      - name: Frontend tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false --passWithNoTests
      
      - name: Integration tests
        run: |
          cd backend/tests/integration
          pytest -v
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.event_name != 'pull_request'
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Deploy (only on push to main/develop)
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./infrastructure/docker/Dockerfile.backend.prod
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}-backend:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./infrastructure/docker/Dockerfile.frontend.prod
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}-frontend:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging (develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Update ECS services with new images
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }}-staging --service ${{ env.ECS_SERVICE_BACKEND }}-staging --force-new-deployment
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }}-staging --service ${{ env.ECS_SERVICE_FRONTEND }}-staging --force-new-deployment
          
          # Wait for deployment to complete
          aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }}-staging --services ${{ env.ECS_SERVICE_BACKEND }}-staging ${{ env.ECS_SERVICE_FRONTEND }}-staging
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging environment..."
          # Add actual smoke tests here
      
      - name: Notify deployment
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Staging deployment completed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production (main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Update ECS services with new images
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }}-prod --service ${{ env.ECS_SERVICE_BACKEND }}-prod --force-new-deployment
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }}-prod --service ${{ env.ECS_SERVICE_FRONTEND }}-prod --force-new-deployment
          
          # Wait for deployment to complete
          aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }}-prod --services ${{ env.ECS_SERVICE_BACKEND }}-prod ${{ env.ECS_SERVICE_FRONTEND }}-prod
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests against production environment..."
          # Add actual smoke tests here
      
      - name: Notify deployment
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Production deployment completed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 